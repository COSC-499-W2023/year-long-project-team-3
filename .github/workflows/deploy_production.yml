name: Production Deployment

#on:
#    push:
#        branches:
#            - master
#        paths-ignore:
#            - docs/**
#    pull_request:
#        branches:
#            - master
#        paths-ignore:
#            - docs/**
#    workflow_dispatch:
on:
    push:

env:
    AWS_REGION: ca-central-1 # set this to your preferred AWS region, e.g. us-west-1
    ECR_REPOSITORY: harp-video # set this to your Amazon ECR repository name
    ECS_SERVICE: production-service # set this to your Amazon ECS service name
    ECS_CLUSTER: HarpVideoProduction # set this to your Amazon ECS cluster name
    ECS_TASK_DEFINITION: .aws/amazon-ecs-production-deployment-task-definition.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
    CONTAINER_NAME: website-production # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
    id-token: write # This is required for requesting the JWT
    contents: read # This is required for actions/checkout

jobs:
    setup-production-db:
        name: Set up Production database
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Write environment variables
              run: |
                  echo "${{ secrets.ENV_PRODUCTION }}" > .env
            - name: Migrate Database
              run: npx prisma migrate dev &>-

    deploy-production:
        name: Deploy Production
        runs-on: ubuntu-latest
        needs: [setup-production-db]
        environment: production
        concurrency:
            group: production
            cancel-in-progress: true

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Create env File
              run: |
                  echo "${{ secrets.ENV_PRODUCTION }}" > .env

            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  role-to-assume: arn:aws:iam::932748244514:role/GithubActionRole
                  role-session-name: GithubActionRole
                  aws-region: ${{ env.AWS_REGION }}
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.prod .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true
