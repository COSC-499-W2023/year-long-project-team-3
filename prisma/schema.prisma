generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  accounts       Account[]
  ownedVideos    Video[]
  videoWhitelist VideoWhitelist[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Video {
  id             String          @id @default(cuid())
  title          String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  owner          User?           @relation(fields: [ownerId], references: [id])
  ownerId        String?
  s3Key          String?
  thumbnail      String?
  videoWhitelist VideoWhitelist?
}

model VideoWhitelist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String?  @unique
  users     User[]
}
