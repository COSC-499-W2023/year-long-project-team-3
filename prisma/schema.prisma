generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                       @id @default(cuid())
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  email                       String                       @unique
  emailVerified               DateTime?
  password                    String?
  accounts                    Account[]
  ownedVideos                 Video[]
  whitelistedVideos           VideoWhitelistedUser[]
  requestedSubmissions        RequestedSubmission[]
  managedSubmissionBoxes      SubmissionBoxManager[]
  RequestedEmailVerifications RequestedEmailVerification[]

  @@index([email])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Video {
  id                String           @id @default(cuid())
  title             String
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  owner             User?            @relation(fields: [ownerId], references: [id])
  ownerId           String?
  s3Key             String?
  isCloudProcessed  Boolean          @default(false)
  isSubmitted       Boolean          @default(false)
  thumbnail         String?
  rawVideoUrl       String?
  processedVideoUrl String?
  videoWhitelist    VideoWhitelist?
  submissions       SubmittedVideo[]
}

model VideoWhitelist {
  id               String                 @id @default(cuid())
  videoId          String                 @unique
  video            Video                  @relation(fields: [videoId], references: [id])
  whitelistedUsers VideoWhitelistedUser[]
}

model VideoWhitelistedUser {
  whitelistedVideoId   String
  whitelistedVideo     VideoWhitelist @relation(fields: [whitelistedVideoId], references: [id])
  whitelistedUserId    String
  whitelistedUser      User           @relation(fields: [whitelistedUserId], references: [id])
  whitelistedAt        DateTime       @default(now())
  whitelistedExpiredAt DateTime?

  @@id([whitelistedVideoId, whitelistedUserId])
}

model SubmissionBox {
  id                    String                 @id @default(cuid())
  title                 String
  description           String?
  createdAt             DateTime               @default(now())
  closesAt              DateTime?
  videoStoreToDate      DateTime?
  maxVideoLength        Int?
  isPublic              Boolean                @default(false)
  requestedSubmissions  RequestedSubmission[]
  submissionBoxManagers SubmissionBoxManager[]
}

model RequestedSubmission {
  id              String           @id @default(cuid())
  email           String
  userId          String?
  user            User?            @relation(fields: [userId], references: [id])
  submissionBoxId String
  submissionBox   SubmissionBox    @relation(fields: [submissionBoxId], references: [id])
  requestedAt     DateTime         @default(now())
  submittedAt     DateTime?
  updatedAt       DateTime         @updatedAt
  videoVersions   SubmittedVideo[]

  @@index([email])
  @@index([userId])
}

model SubmittedVideo {
  videoId               String
  video                 Video               @relation(fields: [videoId], references: [id])
  requestedSubmissionId String
  requestedSubmission   RequestedSubmission @relation(fields: [requestedSubmissionId], references: [id])
  submittedAt           DateTime            @default(now())

  @@id([videoId, requestedSubmissionId])
}

enum SubmissionBoxViewPermission {
  owner
  admin
}

model SubmissionBoxManager {
  userId          String
  user            User                        @relation(fields: [userId], references: [id])
  submissionBoxId String
  submissionBox   SubmissionBox               @relation(fields: [submissionBoxId], references: [id])
  viewPermission  SubmissionBoxViewPermission

  @@id([userId, submissionBoxId])
}

model RequestedEmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}
